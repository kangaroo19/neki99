{"version":3,"file":"static/js/363.8e013ca5.chunk.js","mappings":"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","sources":["components/AppWindow/windows/blog/components/BoardItem.jsx","components/AppWindow/windows/blog/BlogHome.jsx","firebase.js","utils/getCurrentDate.js","utils/getThumbnailImg.js","utils/query/useBlogQuery.js"],"sourcesContent":["import styled from 'styled-components'\r\nimport ContentImg from '../../../components/ContentImg'\r\nimport { Link } from 'react-router-dom'\r\nimport { useGetBlogDetail } from 'utils/query/useBlogQuery'\r\n\r\nexport default function BoardItem({ dataObj }) {\r\n  const { refetch, isLoading, isFetching } = useGetBlogDetail(dataObj.id)\r\n  const onClick = () => {\r\n    refetch()\r\n  }\r\n  if (isFetching || isLoading) return null\r\n  return (\r\n    <BoardItemWrapper>\r\n      <ImgWrapper>\r\n        <ContentImg src={dataObj.img} width=\"100%\" height=\"100%\" />\r\n      </ImgWrapper>\r\n      <TextWrapperLink onClick={onClick} to={`/blog/${dataObj.id}`}>\r\n        <BoardTitle>{dataObj.title}</BoardTitle>\r\n        <BoardContent>{dataObj.summary}</BoardContent>\r\n      </TextWrapperLink>\r\n    </BoardItemWrapper>\r\n  )\r\n}\r\n\r\nconst BoardItemWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid #696969;\r\n  height: 130px;\r\n  box-sizing: border-box;\r\n  padding: 10px 0;\r\n  @media screen and (max-width: 600px) {\r\n    height: 100px;\r\n  }\r\n`\r\n\r\nconst ImgWrapper = styled.div`\r\n  width: 18%;\r\n  height: 100%;\r\n  padding: 10px;\r\n  @media screen and (max-width: 600px) {\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n`\r\nconst TextWrapperLink = styled(Link)`\r\n  width: 82%;\r\n  height: 100%; /* 원하는 최대 높이 설정 */\r\n  overflow: hidden;\r\n  flex-direction: column;\r\n  text-decoration: none;\r\n`\r\nconst BoardTitle = styled.div`\r\n  font-weight: 600;\r\n  white-space: nowrap; /*글자를 한줄로 모아준다*/\r\n  overflow: hidden;\r\n  font-size: 1.4rem;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  text-overflow: ellipsis;\r\n  @media screen and (max-width: 600px) {\r\n    font-size: 1rem;\r\n  }\r\n`\r\nconst BoardContent = styled.div`\r\n  font-size: 1rem;\r\n  text-overflow: ellipsis;\r\n  @media screen and (max-width: 600px) {\r\n    font-size: 0.8rem;\r\n  }\r\n`\r\n","/* eslint-disable */\r\n\r\nimport BoardItem from 'components/AppWindow/windows/blog/components/BoardItem'\r\nimport AppWindow from 'components/AppWindow/AppWindow'\r\nimport styled from 'styled-components'\r\nimport { useBlogQuery } from 'utils/query/useBlogQuery'\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst options = ['all', 'React', 'JavaScript', 'Other'].map((label, index) => ({\r\n  value: index + 1,\r\n  label,\r\n}))\r\n\r\nexport default function BlogHome() {\r\n  const [category, setCategory] = useState(options[0])\r\n  const { data, isLoading, isFetching } = useBlogQuery(category)\r\n  if (isLoading || isFetching) {\r\n    return null\r\n  }\r\n  const onChangeSelect = data => {\r\n    setCategory(data)\r\n  }\r\n  return (\r\n    <>\r\n      <Title>천재현의 블로그</Title>\r\n      <AppWindow.Select onChange={onChangeSelect} options={options} width=\"40%\" />\r\n      {data.length > 0 ? (\r\n        data.map(item => <BoardItem dataObj={item} key={item.id} />)\r\n      ) : (\r\n        <NoDataResult>게시물이 없습니다.</NoDataResult>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst Title = styled.div`\r\n  position: absoulte;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  text-align: center;\r\n  font-size: 2rem;\r\n  background: black;\r\n  color: white;\r\n  padding: 20px 0;\r\n`\r\n// ListWrapper 안에 게시물들과 카테고리 버튼 들어가도록\r\nconst ListWrapper = styled.div`\r\n  margin: 0 auto;\r\n  width: 60%;\r\n  padding: 0 30px;\r\n  background: white;\r\n  @media screen and (max-width: 600px) {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst NoDataResult = styled.div`\r\n  height: 400px;\r\n  font-size: 2rem;\r\n  text-align: center;\r\n`\r\n","/* eslint-disable */\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from 'firebase/app'\r\nimport { getFirestore } from 'firebase/firestore'\r\nimport { getStorage } from 'firebase/storage'\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n}\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig)\r\nexport const db = getFirestore(app)\r\nexport const storage = getStorage(app)\r\n","export default function getCurrentDate() {\r\n  const currentDate = new Date()\r\n  const year = currentDate.getFullYear()\r\n  const month = String(currentDate.getMonth() + 1).padStart(2, '0')\r\n  const day = String(currentDate.getDate()).padStart(2, '0')\r\n  const hours = String(currentDate.getHours()).padStart(2, '0')\r\n  const minutes = String(currentDate.getMinutes()).padStart(2, '0')\r\n  const seconds = String(currentDate.getSeconds()).padStart(2, '0')\r\n\r\n  const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n  return formattedDate\r\n}\r\n","import errorImg from 'asset/images/noImg.webp'\r\n\r\nexport default function getThumnailImg(htmlString) {\r\n  const parser = new DOMParser()\r\n  const doc = parser.parseFromString(htmlString, 'text/html')\r\n  const firstImage = doc.querySelector('img')\r\n  return firstImage ? firstImage.src : errorImg\r\n}\r\n","/* eslint-disable */\r\n\r\nimport { useQuery, useMutation } from '@tanstack/react-query'\r\nimport { db } from '../../firebase'\r\nimport { collection, doc, addDoc, getDocs, query, where, orderBy, setDoc } from 'firebase/firestore'\r\nimport getCurrentDate from 'utils/getCurrentDate'\r\nimport getThumnailImg from 'utils/getThumbnailImg'\r\n\r\nconst getBlogList = category => {\r\n  switch (category.label) {\r\n    case 'all':\r\n      return getAllBlogList()\r\n    case 'React':\r\n      return getReactBlogList()\r\n    case 'JavaScript':\r\n      return getJavaScriptBlogList()\r\n    default:\r\n      return getOtherBlogList()\r\n  }\r\n}\r\nexport const getBlogDetail = async id => {\r\n  const q = query(collection(db, 'blog'), where('id', '==', id))\r\n  const result = []\r\n\r\n  const querySnapshot = await getDocs(q)\r\n  querySnapshot.forEach(doc => {\r\n    // doc.data() is never undefined for query doc snapshots\r\n    result.push(doc.data())\r\n  })\r\n  return result[0]\r\n}\r\nexport const getAllBlogList = async () => {\r\n  // console.log('모든거')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n    querySnapshot.forEach(item => {\r\n      result.push({\r\n        id: item.id,\r\n        title: item.data().title,\r\n        img: item.data().img, // 썸네일 이미지\r\n        summary: item.data().summary,\r\n      })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getReactBlogList = async () => {\r\n  // console.log('리액트 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getJavaScriptBlogList = async () => {\r\n  // console.log('자바스크립트 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getOtherBlogList = async () => {\r\n  // console.log('다른 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst postBlogItem = async data => {\r\n  const blogRef = doc(collection(db, 'blog'))\r\n  await setDoc(blogRef, {\r\n    category: data.category,\r\n    content: data.content,\r\n    title: data.title,\r\n    img: getThumnailImg(data.content),\r\n    summary: data.summary,\r\n    createdAt: getCurrentDate(),\r\n    id: blogRef.id,\r\n  })\r\n}\r\n\r\nexport const useBlogQuery = category => {\r\n  // console.log(category)\r\n  return useQuery({\r\n    queryKey: ['blogList', category],\r\n    queryFn: () => getBlogList(category),\r\n  })\r\n}\r\nexport const useBlogItemMutation = () => {\r\n  return useMutation({\r\n    mutationFn: postBlogItem,\r\n  })\r\n}\r\n\r\nexport const useGetBlogDetail = id => {\r\n  return useQuery({\r\n    queryKey: ['blogDetail', id],\r\n    queryFn: () => getBlogDetail(id),\r\n    enabled: false,\r\n  })\r\n}\r\n// 2024/06/05\r\n// 블로그 리스트 전체 조회 시\r\n// content까지 불러오는 비효율성 때문에\r\n// 전체 조회 요청 시 원래는 모~든 필드 가져왓는데\r\n// 필요한 필드만 가져오는 코드로 바꿈\r\n// 블로그 생성 요청 시\r\n// 썸네일 이미지 지정하여 전체 조회시 content자체를 불러올 일이 없게됨\r\n\r\n// 게시물 클릭시 상세조회 하도록 코드 리팩토링"],"names":["BoardItem","_ref","dataObj","refetch","isLoading","isFetching","useGetBlogDetail","id","_jsxs","BoardItemWrapper","children","_jsx","ImgWrapper","ContentImg","src","img","width","height","TextWrapperLink","onClick","to","concat","BoardTitle","title","BoardContent","summary","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","Link","_templateObject3","_templateObject4","_templateObject5","options","map","label","index","value","BlogHome","category","setCategory","useState","data","useBlogQuery","_Fragment","Title","AppWindow","Select","onChange","length","item","NoDataResult","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","storage","getStorage","getCurrentDate","currentDate","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","getThumnailImg","htmlString","firstImage","DOMParser","parseFromString","querySelector","errorImg","getAllBlogList","async","result","q","query","collection","orderBy","getDocs","forEach","push","error","console","getReactBlogList","getJavaScriptBlogList","getOtherBlogList","postBlogItem","blogRef","doc","setDoc","content","createdAt","useQuery","queryKey","queryFn","getBlogList","useBlogItemMutation","useMutation","mutationFn","where","getBlogDetail","enabled"],"sourceRoot":""}