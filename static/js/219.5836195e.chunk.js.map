{"version":3,"file":"static/js/219.5836195e.chunk.js","mappings":"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","sources":["utils/hook/quill/useImageHandler.js","components/AppWindow/windows/blog/components/QuillEditor.jsx","components/AppWindow/windows/blog/TextEdit.jsx","firebase.js","utils/getCurrentDate.js","utils/getThumbnailImg.js","utils/query/useBlogQuery.js"],"sourcesContent":["/*eslint-disable */\r\n\r\nimport { useRef, useState } from 'react'\r\nimport { uploadBytes, getDownloadURL, ref } from 'firebase/storage'\r\nimport { storage } from '../../../firebase'\r\n\r\nconst useImageHandler = () => {\r\n  const [imageUrl, setImageUrl] = useState('')\r\n  const quillRef = useRef(null)\r\n\r\n  const imageHandler = () => {\r\n    const input = document.createElement('input')\r\n    input.setAttribute('type', 'file')\r\n    input.setAttribute('accept', 'image/*')\r\n    input.click()\r\n    input.addEventListener('change', async () => {\r\n      const editor = quillRef.current.getEditor()\r\n      const file = input.files[0]\r\n      const range = editor.getSelection(true)\r\n      try {\r\n        // 파일명을 \"image/Date.now()\"로 저장\r\n        const storageRef = ref(storage, `image/${Date.now()}`)\r\n        // Firebase Method : uploadBytes, getDownloadURL\r\n        await uploadBytes(storageRef, file).then(snapshot => {\r\n          getDownloadURL(snapshot.ref).then(url => {\r\n            // 이미지 URL 에디터에 삽입\r\n            editor.insertEmbed(range.index, 'image', url)\r\n            // URL 삽입 후 커서를 이미지 뒷 칸으로 이동\r\n            editor.setSelection(range.index + 1)\r\n            console.log('url 확인', url)\r\n            setImageUrl(url)\r\n          })\r\n        })\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  return { imageHandler, quillRef, imageUrl }\r\n}\r\n\r\nexport default useImageHandler\r\n","/* eslint-disable */\r\n\r\nimport React, { useMemo, useRef, useState } from 'react'\r\nimport ReactQuill, { Quill } from 'react-quill'\r\nimport 'react-quill/dist/quill.snow.css'\r\nimport { storage } from '../../../../../firebase'\r\nimport { uploadBytes, getDownloadURL, ref } from 'firebase/storage'\r\nimport ImageResize from 'quill-image-resize'\r\nimport QuillImageDropAndPaste from 'quill-image-drop-and-paste'\r\nimport hljs from 'highlight.js'\r\nimport 'highlight.js/styles/github.css'\r\nimport { useFormContext } from 'react-hook-form'\r\nimport useImageHandler from 'utils/hook/quill/useImageHandler'\r\nimport styled from 'styled-components'\r\n\r\nQuill.register('modules/ImageResize', ImageResize)\r\nQuill.register('modules/imageDropAndPaste', QuillImageDropAndPaste)\r\n\r\nhljs.configure({\r\n  languages: ['javascript', 'ruby', 'python', 'rust'],\r\n})\r\n\r\nexport default function QuillEditor() {\r\n  const { imageHandler, quillRef, imageUrl } = useImageHandler()\r\n\r\n  // 이미지 핸들러\r\n\r\n  const modules = useMemo(() => {\r\n    return {\r\n      toolbar: {\r\n        container: [\r\n          ['image', 'link', 'video', 'code-block'],\r\n          [{ header: [1, 2, 3, false] }],\r\n          ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n          [{ color: [] }, { background: [] }],\r\n          [{ list: 'ordered' }, { list: 'bullet' }],\r\n        ],\r\n        handlers: {\r\n          image: imageHandler,\r\n        },\r\n      },\r\n      syntax: {\r\n        highlight: text => hljs.highlightAuto(text).value,\r\n      },\r\n      imageDropAndPaste: {\r\n        // handler: imageDropHandler,\r\n      },\r\n      ImageResize: {\r\n        parchment: Quill.import('parchment'),\r\n        mopdules: ['Resize', 'DisplaySize'],\r\n      },\r\n    }\r\n  }, [])\r\n\r\n  const formats = [\r\n    'header',\r\n    'bold',\r\n    'italic',\r\n    'underline',\r\n    'strike',\r\n    'blockquote',\r\n    'image',\r\n    'code-block',\r\n    'list',\r\n    'link',\r\n  ]\r\n  const { getValues, setValue } = useFormContext()\r\n\r\n  const handleChange = content => {\r\n    setValue('content', content)\r\n    console.log(content)\r\n  }\r\n\r\n  return (\r\n    <div className=\"ql-snow\">\r\n      <ReactQuillStyled\r\n        className=\"ql-editor\"\r\n        ref={quillRef}\r\n        theme=\"snow\"\r\n        placeholder=\"내용을 입력해주세요.\"\r\n        onChange={handleChange}\r\n        modules={modules}\r\n        formats={formats}\r\n        value={getValues('content')}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ReactQuillStyled = styled(ReactQuill)`\r\n  & > .ql-toolbar {\r\n    position: sticky;\r\n  }\r\n  & > .ql-container {\r\n    overflow-x: hidden;\r\n    height: 300px;\r\n  }\r\n`\r\n","/* eslint-disable */\r\n\r\nimport AppWindow from 'components/AppWindow/AppWindow'\r\nimport QuillEditor from './components/QuillEditor'\r\nimport { Controller, FormProvider, useForm } from 'react-hook-form'\r\nimport { useBlogItemMutation } from 'utils/query/useBlogQuery'\r\n\r\n// const options = ['React', 'JavaScript', 'Other'].map((label, index) => ({\r\n//   value: index + 1,\r\n//   label,\r\n// }))\r\n\r\nexport default function TextEdit() {\r\n  const method = useForm()\r\n  const { mutate } = useBlogItemMutation()\r\n  const onClickSubmitButton = data => {\r\n    mutate(data)\r\n  }\r\n  return (\r\n    <FormProvider {...method}>\r\n      <Controller\r\n        name=\"category\" // 폼의 이름\r\n        control={method.control}\r\n        defaultValue=\"\" // 기본값 설정\r\n        render={({ field }) => (\r\n          <select {...field}>\r\n            <option value=\"\">선택하세요</option>\r\n            <option value=\"react\">리액트</option>\r\n            <option value=\"javascript\">자바스크립트</option>\r\n            <option value=\"other\">기타</option>\r\n          </select>\r\n        )}\r\n      />\r\n      <AppWindow.Input width=\"100%\" placeholder=\"제목을 작성해 주세요\" registerFn={method.register('title')} />\r\n      <AppWindow.Input width=\"100%\" placeholder=\"요약을 작성해 주세요\" registerFn={method.register('summary')} />\r\n      <QuillEditor />\r\n      <AppWindow.Button onClick={method.handleSubmit(onClickSubmitButton)}>전송</AppWindow.Button>\r\n    </FormProvider>\r\n  )\r\n}\r\n","/* eslint-disable */\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from 'firebase/app'\r\nimport { getFirestore } from 'firebase/firestore'\r\nimport { getStorage } from 'firebase/storage'\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n}\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig)\r\nexport const db = getFirestore(app)\r\nexport const storage = getStorage(app)\r\n","export default function getCurrentDate() {\r\n  const currentDate = new Date()\r\n  const year = currentDate.getFullYear()\r\n  const month = String(currentDate.getMonth() + 1).padStart(2, '0')\r\n  const day = String(currentDate.getDate()).padStart(2, '0')\r\n  const hours = String(currentDate.getHours()).padStart(2, '0')\r\n  const minutes = String(currentDate.getMinutes()).padStart(2, '0')\r\n  const seconds = String(currentDate.getSeconds()).padStart(2, '0')\r\n\r\n  const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n  return formattedDate\r\n}\r\n","import errorImg from 'asset/images/noImg.webp'\r\n\r\nexport default function getThumnailImg(htmlString) {\r\n  const parser = new DOMParser()\r\n  const doc = parser.parseFromString(htmlString, 'text/html')\r\n  const firstImage = doc.querySelector('img')\r\n  return firstImage ? firstImage.src : errorImg\r\n}\r\n","/* eslint-disable */\r\n\r\nimport { useQuery, useMutation } from '@tanstack/react-query'\r\nimport { db } from '../../firebase'\r\nimport { collection, doc, addDoc, getDocs, query, where, orderBy, setDoc } from 'firebase/firestore'\r\nimport getCurrentDate from 'utils/getCurrentDate'\r\nimport getThumnailImg from 'utils/getThumbnailImg'\r\n\r\nconst getBlogList = category => {\r\n  switch (category.label) {\r\n    case 'all':\r\n      return getAllBlogList()\r\n    case 'React':\r\n      return getReactBlogList()\r\n    case 'JavaScript':\r\n      return getJavaScriptBlogList()\r\n    default:\r\n      return getOtherBlogList()\r\n  }\r\n}\r\nexport const getBlogDetail = async id => {\r\n  const q = query(collection(db, 'blog'), where('id', '==', id))\r\n  const result = []\r\n\r\n  const querySnapshot = await getDocs(q)\r\n  querySnapshot.forEach(doc => {\r\n    // doc.data() is never undefined for query doc snapshots\r\n    result.push(doc.data())\r\n  })\r\n  return result[0]\r\n}\r\nexport const getAllBlogList = async () => {\r\n  // console.log('모든거')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n    querySnapshot.forEach(item => {\r\n      result.push({\r\n        id: item.id,\r\n        title: item.data().title,\r\n        img: item.data().img, // 썸네일 이미지\r\n        summary: item.data().summary,\r\n      })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getReactBlogList = async () => {\r\n  // console.log('리액트 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getJavaScriptBlogList = async () => {\r\n  // console.log('자바스크립트 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getOtherBlogList = async () => {\r\n  // console.log('다른 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst postBlogItem = async data => {\r\n  const blogRef = doc(collection(db, 'blog'))\r\n  await setDoc(blogRef, {\r\n    category: data.category,\r\n    content: data.content,\r\n    title: data.title,\r\n    img: getThumnailImg(data.content),\r\n    summary: data.summary,\r\n    createdAt: getCurrentDate(),\r\n    id: blogRef.id,\r\n  })\r\n}\r\n\r\nexport const useBlogQuery = category => {\r\n  // console.log(category)\r\n  return useQuery({\r\n    queryKey: ['blogList', category],\r\n    queryFn: () => getBlogList(category),\r\n  })\r\n}\r\nexport const useBlogItemMutation = () => {\r\n  return useMutation({\r\n    mutationFn: postBlogItem,\r\n  })\r\n}\r\n\r\nexport const useGetBlogDetail = id => {\r\n  return useQuery({\r\n    queryKey: ['blogDetail', id],\r\n    queryFn: () => getBlogDetail(id),\r\n    enabled: false,\r\n  })\r\n}\r\n// 2024/06/05\r\n// 블로그 리스트 전체 조회 시\r\n// content까지 불러오는 비효율성 때문에\r\n// 전체 조회 요청 시 원래는 모~든 필드 가져왓는데\r\n// 필요한 필드만 가져오는 코드로 바꿈\r\n// 블로그 생성 요청 시\r\n// 썸네일 이미지 지정하여 전체 조회시 content자체를 불러올 일이 없게됨\r\n\r\n// 게시물 클릭시 상세조회 하도록 코드 리팩토링"],"names":["useImageHandler","imageUrl","setImageUrl","useState","quillRef","useRef","imageHandler","input","document","createElement","setAttribute","click","addEventListener","async","editor","current","getEditor","file","files","range","getSelection","storageRef","ref","storage","concat","Date","now","uploadBytes","then","snapshot","getDownloadURL","url","insertEmbed","index","setSelection","console","log","error","QuillEditor","modules","useMemo","toolbar","container","header","color","background","list","handlers","image","syntax","highlight","text","hljs","highlightAuto","value","imageDropAndPaste","ImageResize","parchment","Quill","import","mopdules","getValues","setValue","useFormContext","_jsx","className","children","ReactQuillStyled","theme","placeholder","onChange","content","formats","register","QuillImageDropAndPaste","configure","languages","styled","ReactQuill","_templateObject","_taggedTemplateLiteral","TextEdit","method","useForm","mutate","useBlogItemMutation","_jsxs","FormProvider","Controller","name","control","defaultValue","render","_ref","field","AppWindow","Input","width","registerFn","Button","onClick","handleSubmit","data","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","getStorage","getCurrentDate","currentDate","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","getThumnailImg","htmlString","firstImage","DOMParser","parseFromString","querySelector","src","errorImg","getAllBlogList","result","q","query","collection","orderBy","getDocs","forEach","item","push","id","title","img","summary","getReactBlogList","getJavaScriptBlogList","getOtherBlogList","postBlogItem","blogRef","doc","setDoc","category","createdAt","useBlogQuery","useQuery","queryKey","queryFn","label","getBlogList","useMutation","mutationFn","useGetBlogDetail","where","getBlogDetail","enabled"],"sourceRoot":""}