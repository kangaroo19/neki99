{"version":3,"file":"static/js/400.78c504b7.chunk.js","mappings":"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","sources":["components/AppWindow/windows/blog/[id].jsx","firebase.js","utils/getCurrentDate.js","utils/getThumbnailImg.js","utils/query/useBlogMutation.js","utils/query/useBlogQuery.js","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts"],"sourcesContent":["/* eslint-disable */\r\n\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport 'highlight.js/styles/github.css' // 코드 하이라이트 스타일 적용\r\nimport 'react-quill/dist/quill.snow.css'\r\nimport { useGetBlogDetail } from 'utils/query/useBlogQuery'\r\nimport { useBlogItemMutation } from 'utils/query/useBlogMutation'\r\nimport { useAuthStore } from 'utils/zustand/useAuthStore'\r\nimport { useAppWindowRender } from 'utils/zustand/useAppWindowRender'\r\n\r\nexport default function BlogDetail() {\r\n  const { id } = useParams() // 현재 페이지의 id값\r\n  const { data, isLoading } = useGetBlogDetail(id) // id 값에 따른 블로그 GET\r\n  const { mutate } = useBlogItemMutation()\r\n  const { isAuth } = useAuthStore() // 로그인 여부 판별\r\n  const { onClickWindow } = useAppWindowRender()\r\n  const navigate = useNavigate()\r\n\r\n  // mutate 함수는 단일인자만 받으므로 여러 값을 인자로 넣으려면 객체로 보내야함\r\n  const onClickMutation = (method, data) => {\r\n    if (isAuth) {\r\n      // 로그인된 상태일 경우, method 값에 따른 함수 수행\r\n      mutate({\r\n        method: method,\r\n        data: data,\r\n      })\r\n    } else {\r\n      // 로그인된 상태 아닐 경우 로그인 창 띄움\r\n      onClickWindow('loginWindow')\r\n    }\r\n  }\r\n  const onClickUpdateButton = () => {\r\n    // 나중에 isAuth 판별 로직 추가\r\n    navigate('/blog/textEdit', { state: data })\r\n  }\r\n  return (\r\n    <>\r\n      {!isLoading && (\r\n        <>\r\n          <TitleWrapper>\r\n            <Title>{data.title}</Title>\r\n            <쩌리컨테이너>\r\n              <게시물생성날짜>생성일 : {data.createdAt}</게시물생성날짜>\r\n              <삭제및수정>\r\n                <span onClick={onClickUpdateButton}>수정</span>\r\n                <span>/</span>\r\n                <span onClick={() => onClickMutation('delete', id)}>삭제</span>\r\n              </삭제및수정>\r\n            </쩌리컨테이너>\r\n          </TitleWrapper>\r\n          <마크다운 dangerouslySetInnerHTML={{ __html: data.content }} />\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst TitleWrapper = styled.div`\r\n  padding: 10px;\r\n  border-bottom: 3px solid #696969;\r\n`\r\nconst Title = styled.div`\r\n  padding: 10px;\r\n  font-size: 2rem;\r\n  text-align: center;\r\n  @media screen and (max-width: 600px) {\r\n    font-size: 1.6rem;\r\n  }\r\n`\r\nconst 쩌리컨테이너 = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 5px;\r\n`\r\nconst 게시물생성날짜 = styled.div``\r\nconst 삭제및수정 = styled.div`\r\n  > span {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst 마크다운 = styled.div`\r\n  width: 100%;\r\n  padding: 20px 0;\r\n  * {\r\n    width: 100%;\r\n  }\r\n`\r\n","/* eslint-disable */\r\n\r\n// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from 'firebase/app'\r\nimport { getFirestore } from 'firebase/firestore'\r\nimport { getStorage } from 'firebase/storage'\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID,\r\n}\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig)\r\nexport const db = getFirestore(app)\r\nexport const storage = getStorage(app)\r\n","export default function getCurrentDate() {\r\n  const currentDate = new Date()\r\n  const year = currentDate.getFullYear()\r\n  const month = String(currentDate.getMonth() + 1).padStart(2, '0')\r\n  const day = String(currentDate.getDate()).padStart(2, '0')\r\n  const hours = String(currentDate.getHours()).padStart(2, '0')\r\n  const minutes = String(currentDate.getMinutes()).padStart(2, '0')\r\n  const seconds = String(currentDate.getSeconds()).padStart(2, '0')\r\n\r\n  const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n  return formattedDate\r\n}\r\n","import errorImg from 'asset/images/noImg.webp'\r\n\r\nexport default function getThumnailImg(htmlString) {\r\n  const parser = new DOMParser()\r\n  const doc = parser.parseFromString(htmlString, 'text/html')\r\n  const firstImage = doc.querySelector('img')\r\n  return firstImage ? firstImage.src : errorImg\r\n}\r\n","/* eslint-disable */\r\n\r\nimport { useMutation } from '@tanstack/react-query'\r\nimport { db } from '../../firebase'\r\nimport { collection, doc, addDoc, getDocs, query, where, orderBy, setDoc, deleteDoc } from 'firebase/firestore'\r\nimport getCurrentDate from 'utils/getCurrentDate'\r\nimport getThumnailImg from 'utils/getThumbnailImg'\r\n\r\nconst mutateBlog = data => {\r\n  switch (data.method) {\r\n    case 'post':\r\n      return postBlogItem(data.data)\r\n    case 'delete':\r\n      return deleteBlogItem(data.data)\r\n    case 'update':\r\n      return updateBlogItem(data)\r\n  }\r\n}\r\n\r\nconst postBlogItem = async data => {\r\n  const blogRef = doc(collection(db, 'blog'))\r\n  await setDoc(blogRef, {\r\n    category: data.category,\r\n    content: data.content,\r\n    title: data.title,\r\n    img: getThumnailImg(data.content),\r\n    summary: data.summary,\r\n    createdAt: getCurrentDate(),\r\n    id: blogRef.id,\r\n  })\r\n}\r\n\r\nconst deleteBlogItem = async data => {\r\n  console.log(data)\r\n  await deleteDoc(doc(db, 'blog', data))\r\n}\r\n\r\nconst updateBlogItem = data => {\r\n  console.log(data)\r\n}\r\n\r\nexport const useBlogItemMutation = () => {\r\n  return useMutation({\r\n    mutationKey: ['blogMutate'],\r\n    mutationFn: data => mutateBlog(data),\r\n  })\r\n}\r\n","/* eslint-disable */\r\n\r\nimport { useQuery, useMutation } from '@tanstack/react-query'\r\nimport { db } from '../../firebase'\r\nimport { collection, doc, addDoc, getDocs, query, where, orderBy, setDoc } from 'firebase/firestore'\r\nimport getCurrentDate from 'utils/getCurrentDate'\r\nimport getThumnailImg from 'utils/getThumbnailImg'\r\n\r\nconst getBlogList = category => {\r\n  switch (category.label) {\r\n    case 'all':\r\n      return getAllBlogList()\r\n    case 'React':\r\n      return getReactBlogList()\r\n    case 'JavaScript':\r\n      return getJavaScriptBlogList()\r\n    default:\r\n      return getOtherBlogList()\r\n  }\r\n}\r\nexport const getBlogDetail = async id => {\r\n  const q = query(collection(db, 'blog'), where('id', '==', id))\r\n  const result = []\r\n\r\n  const querySnapshot = await getDocs(q)\r\n  querySnapshot.forEach(doc => {\r\n    // doc.data() is never undefined for query doc snapshots\r\n    result.push(doc.data())\r\n  })\r\n  return result[0]\r\n}\r\nexport const getAllBlogList = async () => {\r\n  // console.log('모든거')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n    querySnapshot.forEach(item => {\r\n      result.push({\r\n        id: item.id,\r\n        title: item.data().title,\r\n        img: item.data().img, // 썸네일 이미지\r\n        summary: item.data().summary,\r\n      })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getReactBlogList = async () => {\r\n  // console.log('리액트 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getJavaScriptBlogList = async () => {\r\n  // console.log('자바스크립트 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst getOtherBlogList = async () => {\r\n  // console.log('다른 블로그 리스트')\r\n  const result = []\r\n  try {\r\n    const q = query(collection(db, 'blog'), orderBy('createdAt', 'desc'))\r\n    const querySnapshot = await getDocs(q)\r\n\r\n    querySnapshot.forEach(item => {\r\n      result.push({ ...item.data(), id: item.id })\r\n    })\r\n    return result\r\n  } catch (error) {\r\n    console.error('Error fetching document:', error)\r\n    throw error\r\n  }\r\n}\r\nconst postBlogItem = async data => {\r\n  console.log(data)\r\n  const blogRef = doc(collection(db, 'blog'))\r\n  await setDoc(blogRef, {\r\n    category: data.category,\r\n    content: data.content,\r\n    title: data.title,\r\n    img: getThumnailImg(data.content),\r\n    summary: data.summary,\r\n    createdAt: getCurrentDate(),\r\n    id: blogRef.id,\r\n  })\r\n}\r\n\r\nexport const useBlogQuery = category => {\r\n  // console.log(category)\r\n  return useQuery({\r\n    queryKey: ['blogList', category],\r\n    queryFn: () => getBlogList(category),\r\n  })\r\n}\r\nexport const useBlogItemMutation = () => {\r\n  return useMutation({\r\n    mutationFn: (data)=>postBlogItem(data),\r\n  })\r\n}\r\n\r\nexport const useGetBlogDetail = id => {\r\n  return useQuery({\r\n    queryKey: ['blogDetail', id],\r\n    queryFn: () => getBlogDetail(id),\r\n    enabled: false,\r\n  })\r\n}\r\n// 2024/06/05\r\n// 블로그 리스트 전체 조회 시\r\n// content까지 불러오는 비효율성 때문에\r\n// 전체 조회 요청 시 원래는 모~든 필드 가져왓는데\r\n// 필요한 필드만 가져오는 코드로 바꿈\r\n// 블로그 생성 요청 시\r\n// 썸네일 이미지 지정하여 전체 조회시 content자체를 불러올 일이 없게됨\r\n\r\n// 게시물 클릭시 상세조회 하도록 코드 리팩토링","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    } else if (this.#currentMutation?.state.status === 'pending') {\n      this.#currentMutation.setOptions(this.options)\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","'use client'\nimport * as React from 'react'\nimport { MutationObserver, notifyManager } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { noop, shouldThrowError } from './utils'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport type { DefaultError, QueryClient } from '@tanstack/query-core'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n  queryClient?: QueryClient,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const client = useQueryClient(queryClient)\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        client,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.throwOnError, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n"],"names":["BlogDetail","id","useParams","data","isLoading","useGetBlogDetail","mutate","useBlogItemMutation","isAuth","useAuthStore","onClickWindow","useAppWindowRender","navigate","useNavigate","_jsx","_Fragment","children","_jsxs","TitleWrapper","Title","title","쩌리컨테이너","게시물생성날짜","createdAt","삭제및수정","onClick","onClickUpdateButton","state","onClickMutation","method","마크다운","dangerouslySetInnerHTML","__html","content","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","app","initializeApp","db","getFirestore","storage","getStorage","getCurrentDate","currentDate","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","concat","getThumnailImg","htmlString","firstImage","DOMParser","parseFromString","querySelector","src","errorImg","postBlogItem","async","blogRef","doc","collection","setDoc","category","img","summary","deleteBlogItem","console","log","deleteDoc","updateBlogItem","useMutation","mutationKey","mutationFn","mutateBlog","getAllBlogList","result","q","query","orderBy","getDocs","forEach","item","push","error","getReactBlogList","getJavaScriptBlogList","getOtherBlogList","useBlogQuery","useQuery","queryKey","queryFn","label","getBlogList","where","getBlogDetail","enabled","MutationObserver","_client","WeakMap","_currentResult","_currentMutation","_mutateOptions","_Class_brand","WeakSet","Subscribable","constructor","client","options","super","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","this","setOptions","bindMethods","_assertClassBrand","_updateResult","call","bind","reset","_classPrivateFieldGet2","prevOptions","_classPrivateFieldGet","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","observer","hashKey","status","onUnsubscribe","_classPrivateFieldGet3","hasListeners","removeObserver","onMutationUpdate","action","_notify","getCurrentResult","_classPrivateFieldGet4","variables","_classPrivateFieldGet5","build","addObserver","execute","_classPrivateFieldGet6","_classPrivateFieldGet7","getDefaultState","isPending","isSuccess","isError","isIdle","notifyManager","batch","context","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet10","_classPrivateFieldGet11","onSuccess","onSettled","_classPrivateFieldGet12","_classPrivateFieldGet13","_classPrivateFieldGet14","_classPrivateFieldGet15","onError","listeners","listener","queryClient","useQueryClient","React","onStoreChange","subscribe","batchCalls","mutateOptions","catch","noop","shouldThrowError","throwOnError","mutateAsync"],"sourceRoot":""}